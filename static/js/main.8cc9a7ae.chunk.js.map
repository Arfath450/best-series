{"version":3,"sources":["Card.jsx","Sdata.jsx","Series.jsx","serviceWorker.js","index.js"],"names":["Card","props","className","src","imgsrc","alt","title","sname","href","link","target","Sdata","Series","map","val","index","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDom","render","onAddToHomescreenClick","alert","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6KAmBeA,MAhBf,SAAcC,GACV,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,UAC5B,yBAAKH,UAAU,aACX,0BAAMA,UAAU,iBAAiBD,EAAMK,OACvC,wBAAIJ,UAAU,cAAcD,EAAMM,OAClC,uBAAGC,KAAMP,EAAMQ,KAAMC,OAAO,UAC5B,kDCyBLC,EArCD,CACV,CACIP,OAAS,6CACTE,MAAQ,2BACRC,MAAQ,OACRE,KAAO,6CAGX,CACIL,OAAS,6CACTE,MAAQ,2BACRC,MAAQ,kBACRE,KAAO,uDAGX,CACIL,OAAS,6CACTE,MAAQ,2BACRC,MAAQ,cACRE,KAAO,6CAGX,CACIL,OAAS,6CACTE,MAAQ,2BACRC,MAAQ,mBACRE,KAAO,uDAGX,CACIL,OAAS,6CACTE,MAAQ,2BACRC,MAAQ,QACRE,KAAO,wDCVAG,EAlBA,kBACX,oCACA,wBAAIV,UAAU,WAAd,sCAECS,EAAME,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACAX,OAAUU,EAAIV,OACdE,MAASQ,EAAIR,MACbC,MAASO,EAAIP,MACbE,KAAQK,EAAIL,YCHlBO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oBCrFjEC,IAASC,OACL,oCACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAiBC,uBAPe,WAClCC,MAAM,qCAQJC,SAASC,eAAe,SDMrB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,eAAwB/B,OAAOC,SAASX,MACpD0C,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAM0B,eAAN,sBAEPjC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OChC/BE,I","file":"static/js/main.8cc9a7ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction Card(props){\r\n    return(\r\n        <div className=\"cards\">\r\n            <div className=\"card\">\r\n                <img src={props.imgsrc} alt='myPic' />\r\n                <div className=\"card_info\">\r\n                    <span className='card_catogery'>{props.title}</span>\r\n                    <h3 className='card_title'>{props.sname}</h3>\r\n                    <a href={props.link} target=\"_blank\">\r\n                    <button>Watch Now</button></a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","const Sdata = [\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp4056410.jpg\",\r\n        title : \"A Netflix Orignal Series\",\r\n        sname : \"Dark\",\r\n        link : \"https://www.netflix.com/in/title/80100172\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp1839580.jpg\",\r\n        title : \"A Netflix Orignal Series\",\r\n        sname : \"Stranger Things\",\r\n        link : \"https://www.netflix.com/in/title/80057281?source=35\"\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp2358410.jpg\",\r\n        title : \"A Netflix Orignal Series\",\r\n        sname : \"Money Heist\",\r\n        link : \"https://www.netflix.com/in/title/80192098\"\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp3844918.jpg\",\r\n        title : \"A Netflix Orignal Series\",\r\n        sname : \"the last kingdom\",\r\n        link : \"https://www.netflix.com/in/title/80074249?source=35\"\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp3637823.jpg\",\r\n        title : \"A Netflix Orignal Series\",\r\n        sname : \"ozark\",\r\n        link : \"https://www.netflix.com/in/title/80117552?source=35\"\r\n    },\r\n];\r\n\r\nexport default Sdata;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport Sdata from './Sdata';\r\nimport './index.css';\r\n\r\nconst Series = () => (\r\n    <>\r\n    <h1 className=\"heading\">List Of Top Netflix Orignal Series</h1>\r\n    \r\n    {Sdata.map((val, index) => {\r\n        return(\r\n            <Card \r\n            imgsrc = {val.imgsrc}\r\n            title = {val.title}\r\n            sname = {val.sname}\r\n            link = {val.link}\r\n            />\r\n        );\r\n    })}\r\n\r\n    </>\r\n);\r\n\r\nexport default Series;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport Series from './Series';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AddToHomescreen from 'react-add-to-homescreen';\r\n\r\n const handleAddToHomescreenClick = () => {\r\n  alert('Add BestSeries To Home Screen');\r\n};\r\n\r\nReactDom.render(\r\n    <>\r\n    <Series />\r\n    <AddToHomescreen onAddToHomescreenClick={handleAddToHomescreenClick} />\r\n    </>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n\r\n\r\n"],"sourceRoot":""}